name: Publish Python distribution to PyPI and TestPyPI

on:
  release:
    types: [published, prereleased]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-wheel-contents
          
      - name: Build distribution
        run: python -m build
        
      - name: Check distribution
        run: |
          twine check dist/*
          check-wheel-contents dist/*.whl
          
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  prepare-release:
    name: Prepare GitHub Release
    needs: [build]
    # Only run this job if triggered by a tag push and not a release event
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
      
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if pre-release version
        id: check_prerelease
        run: |
          if [[ "${{ steps.get_version.outputs.version }}" =~ .*[a|b|rc].* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
          generate_release_notes: true

  sign-and-publish:
    name: Sign and Publish Python
    needs: [prepare-release, build]
    # Run this job for both release events and after prepare-release
    if: always() && (needs.prepare-release.result == 'success' || needs.prepare-release.result == 'skipped')
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.release.prerelease == true || fromJSON(needs.prepare-release.outputs.is_prerelease || 'false') == true ? 'testpypi' : 'pypi' }}
      url: ${{ github.event.release.prerelease == true || fromJSON(needs.prepare-release.outputs.is_prerelease || 'false') == true ? 'https://test.pypi.org/p/${{ github.event.repository.name }}' : 'https://pypi.org/p/${{ github.event.repository.name }}' }}
    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Sign the distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: |
            ./dist/*.tar.gz
            ./dist/*.whl
            
      - name: Upload to GitHub Release
        # Only upload if this was triggered by a tag push or is a regular release
        if: github.event_name != 'release' || github.event.release.prerelease != true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload
          '${{ github.ref_name }}'
          dist/**
          --repo '${{ github.repository }}'
          --clobber

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.11
        with:
          repository-url: ${{ github.event.release.prerelease == true || fromJSON(needs.prepare-release.outputs.is_prerelease || 'false') == true ? 'https://test.pypi.org/legacy/' : '' }}